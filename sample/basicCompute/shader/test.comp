#version 460

#define LOCAL_SIZE_X 16
#define LOCAL_SIZE_Y 16
#define LOCAL_SIZE_Z 1

layout(set = 0, binding = 0) uniform Uniform
{
	uint width;
	uint height;
}
imageInfo;
layout(set = 1, binding = 0, rgba8) uniform readonly image2D InputImage;
layout(set = 1, binding = 1, rgba8) uniform writeonly image2D OutputImage;
layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

vec4 colorToGrayScale(in const vec4 color)
{
	const float ave = (color.r + color.g + color.b) / 3;
	return vec4(ave, ave, ave, 1);
}
void main()
{
	ivec2 index = ivec2(gl_GlobalInvocationID.xy);
	const uint rowBegin = index.y * LOCAL_SIZE_Y;
	const uint rowEnd = min(rowBegin + LOCAL_SIZE_Y, imageInfo.height);
	const uint colBegin = index.x * LOCAL_SIZE_X;
	const uint colEnd = min(colBegin + LOCAL_SIZE_X, imageInfo.width);
	for (uint row = rowBegin; row < rowEnd; ++row) {
		for (uint col = colBegin; col < colEnd; ++col) {
			imageStore(OutputImage, ivec2(row, col),
					   colorToGrayScale(imageLoad(InputImage, ivec2(row, col))));
		}
	}
}